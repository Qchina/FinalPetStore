{"ast":null,"code":"import { catalogApi } from '@/api/catalog';\nexport default {\n  props: {\n    category: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      products: [],\n      categoryName: ''\n    };\n  },\n  watch: {\n    category: {\n      immediate: true,\n      handler: 'fetchProducts'\n    }\n  },\n  methods: {\n    // 添加getCategoryId方法，将前端分类名称转换为后端需要的格式\n    getCategoryId(categoryName) {\n      // 根据您的后端API要求进行转换\n      // 这里假设categoryName就是categoryId，如果不是，请根据实际情况修改\n      return categoryName;\n    },\n    async fetchProducts() {\n      try {\n        // 将前端分类名称转换为后端API需要的categoryId格式\n        const categoryId = this.getCategoryId(this.category);\n        this.categoryName = this.category;\n        console.log('Fetching products for category:', categoryId);\n\n        // 获取分类信息\n        const categoryResponse = await catalogApi.getCategory(categoryId);\n        console.log('Category API response:', categoryResponse);\n        if (categoryResponse.data && categoryResponse.data.status === 0) {\n          // 如果API返回成功，使用API返回的数据\n          this.categoryName = categoryResponse.data.data.name || this.category;\n          this.products = categoryResponse.data.data.productList || [];\n          console.log('Products loaded successfully:', this.products);\n        } else {\n          console.error('Failed to fetch category:', categoryResponse?.data?.msg || 'Unknown error');\n          // 如果API调用失败，使用模拟数据作为备份\n          this.useMockData();\n        }\n      } catch (error) {\n        console.error('Failed to fetch products:', error);\n        // 如果API调用出错，使用模拟数据作为备份\n        this.useMockData();\n      }\n    },\n    // 其他方法保持不变\n    viewProduct(productId) {\n      this.$emit('view-product', productId, this.category);\n      console.log('Emitting view-product event:', productId, this.category);\n    },\n    returnToMainMenu() {\n      this.$emit('switch-to-commodity-list');\n    },\n    useMockData() {\n      // 修改模拟数据结构，使其与API返回的数据结构一致\n      this.products = [{\n        productId: 'FI-SW-01',\n        name: '金鱼'\n      }, {\n        productId: 'K9-DL-01',\n        name: '斑点狗'\n      }, {\n        productId: 'RP-SN-01',\n        name: '响尾蛇'\n      }];\n      console.log('Using mock data for products');\n    }\n  }\n};","map":{"version":3,"names":["catalogApi","props","category","type","String","required","data","products","categoryName","watch","immediate","handler","methods","getCategoryId","fetchProducts","categoryId","console","log","categoryResponse","getCategory","status","name","productList","error","msg","useMockData","viewProduct","productId","$emit","returnToMainMenu"],"sources":["D:\\ournewpetstore\\src\\components\\commodity\\CategoryDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"category-detail-container\">\r\n    <div class=\"auth-form\">\r\n      <div class=\"header-container\">\r\n        <h2>{{ category }}</h2>\r\n        <button type=\"button\" @click=\"returnToMainMenu\" class=\"return-button\">Return to Main Menu</button>\r\n      </div>\r\n      <div class=\"form-container\">\r\n        <div class=\"form-group header-group\">\r\n          <div class=\"col\">Product ID</div>\r\n          <div class=\"col\">Name</div>\r\n        </div>\r\n        <div v-for=\"product in products\" :key=\"product.productId\" class=\"form-group product-item\">\r\n          <div class=\"col\">\r\n            <a href=\"#\" @click.prevent=\"viewProduct(product.productId)\">{{ product.productId }}</a>\r\n          </div>\r\n          <div class=\"col\">{{ product.name }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { catalogApi } from '@/api/catalog';\r\n\r\nexport default {\r\n  props: {\r\n    category: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      products: [],\r\n      categoryName: ''\r\n    };\r\n  },\r\n  watch: {\r\n    category: {\r\n      immediate: true,\r\n      handler: 'fetchProducts'\r\n    }\r\n  },\r\n  methods: {\r\n    // 添加getCategoryId方法，将前端分类名称转换为后端需要的格式\r\n    getCategoryId(categoryName) {\r\n      // 根据您的后端API要求进行转换\r\n      // 这里假设categoryName就是categoryId，如果不是，请根据实际情况修改\r\n      return categoryName;\r\n    },\r\n    \r\n    async fetchProducts() {\r\n      try {\r\n        // 将前端分类名称转换为后端API需要的categoryId格式\r\n        const categoryId = this.getCategoryId(this.category);\r\n        this.categoryName = this.category;\r\n        \r\n        console.log('Fetching products for category:', categoryId);\r\n        \r\n        // 获取分类信息\r\n        const categoryResponse = await catalogApi.getCategory(categoryId);\r\n        console.log('Category API response:', categoryResponse);\r\n        \r\n        if (categoryResponse.data && categoryResponse.data.status === 0) {\r\n          // 如果API返回成功，使用API返回的数据\r\n          this.categoryName = categoryResponse.data.data.name || this.category;\r\n          this.products = categoryResponse.data.data.productList || [];\r\n          console.log('Products loaded successfully:', this.products);\r\n        } else {\r\n          console.error('Failed to fetch category:', categoryResponse?.data?.msg || 'Unknown error');\r\n          // 如果API调用失败，使用模拟数据作为备份\r\n          this.useMockData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch products:', error);\r\n        // 如果API调用出错，使用模拟数据作为备份\r\n        this.useMockData();\r\n      }\r\n    },\r\n    \r\n    // 其他方法保持不变\r\n    viewProduct(productId) {\r\n      this.$emit('view-product', productId, this.category);\r\n      console.log('Emitting view-product event:', productId, this.category);\r\n    },\r\n    \r\n    returnToMainMenu() {\r\n      this.$emit('switch-to-commodity-list');\r\n    },\r\n    \r\n    useMockData() {\r\n      // 修改模拟数据结构，使其与API返回的数据结构一致\r\n      this.products = [\r\n        { productId: 'FI-SW-01', name: '金鱼' },\r\n        { productId: 'K9-DL-01', name: '斑点狗' },\r\n        { productId: 'RP-SN-01', name: '响尾蛇' }\r\n      ];\r\n      console.log('Using mock data for products');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.category-detail-container {\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n}\r\n\r\n.auth-form {\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  border-radius: 10px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n  transform: translateY(0);\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.auth-form:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.header-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  gap: 20px;\r\n}\r\n\r\nh2 {\r\n  text-align: left;\r\n  margin-bottom: 0;\r\n  font-size: 20px;\r\n}\r\n\r\n.return-button {\r\n  width: auto;\r\n  padding: 8px 16px;\r\n  font-size: 14px;\r\n}\r\n\r\n.form-container {\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\nbutton {\r\n  background-color: #2196F3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 25px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0b7dda;\r\n  transform: scale(1.02);\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.form-group:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.header-group {\r\n  background-color: #f5f5f5;\r\n  font-weight: bold;\r\n}\r\n\r\n.col {\r\n  flex: 1;\r\n  padding: 12px;\r\n  word-break: break-word;\r\n  border-right: 1px solid #e0e0e0;\r\n}\r\n\r\n.col:last-child {\r\n  border-right: none;\r\n}\r\n\r\n.product-item:nth-child(even) {\r\n  background-color: #fafafa;\r\n}\r\n\r\n.product-item:hover {\r\n  background-color: #f0f0f0;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.col a {\r\n  color: #2196F3;\r\n  text-decoration: none;\r\n}\r\n\r\n.col a:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>"],"mappings":"AAwBA,SAASA,UAAS,QAAS,eAAe;AAE1C,eAAe;EACbC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLP,QAAQ,EAAE;MACRQ,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,aAAaA,CAACL,YAAY,EAAE;MAC1B;MACA;MACA,OAAOA,YAAY;IACrB,CAAC;IAED,MAAMM,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF;QACA,MAAMC,UAAS,GAAI,IAAI,CAACF,aAAa,CAAC,IAAI,CAACX,QAAQ,CAAC;QACpD,IAAI,CAACM,YAAW,GAAI,IAAI,CAACN,QAAQ;QAEjCc,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,UAAU,CAAC;;QAE1D;QACA,MAAMG,gBAAe,GAAI,MAAMlB,UAAU,CAACmB,WAAW,CAACJ,UAAU,CAAC;QACjEC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,gBAAgB,CAAC;QAEvD,IAAIA,gBAAgB,CAACZ,IAAG,IAAKY,gBAAgB,CAACZ,IAAI,CAACc,MAAK,KAAM,CAAC,EAAE;UAC/D;UACA,IAAI,CAACZ,YAAW,GAAIU,gBAAgB,CAACZ,IAAI,CAACA,IAAI,CAACe,IAAG,IAAK,IAAI,CAACnB,QAAQ;UACpE,IAAI,CAACK,QAAO,GAAIW,gBAAgB,CAACZ,IAAI,CAACA,IAAI,CAACgB,WAAU,IAAK,EAAE;UAC5DN,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE,IAAI,CAACV,QAAQ,CAAC;QAC7D,OAAO;UACLS,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEL,gBAAgB,EAAEZ,IAAI,EAAEkB,GAAE,IAAK,eAAe,CAAC;UAC1F;UACA,IAAI,CAACC,WAAW,CAAC,CAAC;QACpB;MACF,EAAE,OAAOF,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD;QACA,IAAI,CAACE,WAAW,CAAC,CAAC;MACpB;IACF,CAAC;IAED;IACAC,WAAWA,CAACC,SAAS,EAAE;MACrB,IAAI,CAACC,KAAK,CAAC,cAAc,EAAED,SAAS,EAAE,IAAI,CAACzB,QAAQ,CAAC;MACpDc,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEU,SAAS,EAAE,IAAI,CAACzB,QAAQ,CAAC;IACvE,CAAC;IAED2B,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACD,KAAK,CAAC,0BAA0B,CAAC;IACxC,CAAC;IAEDH,WAAWA,CAAA,EAAG;MACZ;MACA,IAAI,CAAClB,QAAO,GAAI,CACd;QAAEoB,SAAS,EAAE,UAAU;QAAEN,IAAI,EAAE;MAAK,CAAC,EACrC;QAAEM,SAAS,EAAE,UAAU;QAAEN,IAAI,EAAE;MAAM,CAAC,EACtC;QAAEM,SAAS,EAAE,UAAU;QAAEN,IAAI,EAAE;MAAM,EACtC;MACDL,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}