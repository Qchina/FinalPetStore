{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: '',\n        captcha: ''\n      },\n      captchaImage: '',\n      // 验证码图片base64数据\n      captchaText: '' // 验证码文本\n    };\n  },\n  mounted() {\n    this.refreshCaptcha(); // 组件加载时获取验证码\n  },\n  methods: {\n    generateCaptcha() {\n      // 生成4位随机字母数字验证码\n      const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghjkmnpqrstuvwxyz23456789';\n      let result = '';\n      for (let i = 0; i < 4; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      this.captchaText = result;\n\n      // 创建验证码图片（简单实现）\n      const canvas = document.createElement('canvas');\n      canvas.width = 100;\n      canvas.height = 40;\n      const ctx = canvas.getContext('2d');\n\n      // 背景色\n      ctx.fillStyle = '#f5f5f5';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // 绘制验证码文本\n      ctx.font = '24px Arial';\n      ctx.fillStyle = '#333';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(result, canvas.width / 2, canvas.height / 2);\n\n      // 添加干扰线\n      for (let i = 0; i < 5; i++) {\n        ctx.strokeStyle = '#ccc';\n        ctx.beginPath();\n        ctx.moveTo(Math.random() * canvas.width, Math.random() * canvas.height);\n        ctx.lineTo(Math.random() * canvas.width, Math.random() * canvas.height);\n        ctx.stroke();\n      }\n      this.captchaImage = canvas.toDataURL();\n    },\n    refreshCaptcha() {\n      this.generateCaptcha();\n    },\n    mounted() {\n      this.generateCaptcha(); // 组件加载时生成验证码\n    },\n    async handleLogin() {\n      // 验证码验证（不区分大小写）\n      if (this.loginForm.captcha.toUpperCase() !== this.captchaText.toUpperCase()) {\n        alert('验证码错误');\n        this.refreshCaptcha();\n        return;\n      }\n      try {\n        const response = await axios.post('http://localhost:8080/api/user/login', {\n          username: this.loginForm.username,\n          password: this.loginForm.password\n        });\n        if (response.data.success) {\n          // 登录成功处理\n          localStorage.setItem('token', response.data.token);\n          this.$router.push('/'); // 跳转到首页\n        } else {\n          alert(response.data.message || '登录失败');\n          this.refreshCaptcha();\n        }\n      } catch (error) {\n        console.error('登录请求失败:', error);\n        alert('网络错误，请稍后重试');\n        this.refreshCaptcha();\n      }\n    },\n    switchToRegister() {\n      this.$emit('switch-to-register');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","loginForm","username","password","captcha","captchaImage","captchaText","mounted","refreshCaptcha","methods","generateCaptcha","chars","result","i","charAt","Math","floor","random","length","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","strokeStyle","beginPath","moveTo","lineTo","stroke","toDataURL","handleLogin","toUpperCase","alert","response","post","success","localStorage","setItem","token","$router","push","message","error","console","switchToRegister","$emit"],"sources":["D:\\ournewpetstore\\src\\components\\account\\UserLogin.vue"],"sourcesContent":["<template>\r\n <div class=\"login-container\">\r\n  <div class=\"auth-form\">\r\n    <h2>Login in to Your Account</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div class=\"form-group\">\r\n        <label>Username</label>\r\n        <input v-model=\"loginForm.username\" type=\"text\" required>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Password</label>\r\n        <input v-model=\"loginForm.password\" type=\"password\" required>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Captcha</label>\r\n        <div class=\"captcha-container\">\r\n          <input v-model=\"loginForm.captcha\" type=\"text\" required>\r\n          <img :src=\"captchaImage\" @click=\"refreshCaptcha\" alt=\"验证码\" class=\"captcha-image\">\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\">登录</button>\r\n    </form>\r\n    <p>Need an account ？<a href=\"#\" @click=\"switchToRegister\">Register now !</a></p>\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n  data() {\r\n    return {\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n        captcha: ''\r\n      },\r\n      captchaImage: '',  // 验证码图片base64数据\r\n      captchaText: ''    // 验证码文本\r\n    }\r\n  },\r\n  mounted() {\r\n    this.refreshCaptcha();  // 组件加载时获取验证码\r\n  },\r\n  methods: {\r\n    generateCaptcha() {\r\n    // 生成4位随机字母数字验证码\r\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghjkmnpqrstuvwxyz23456789';\r\n    let result = '';\r\n    for (let i = 0; i < 4; i++) {\r\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    this.captchaText = result;\r\n    \r\n    // 创建验证码图片（简单实现）\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 100;\r\n    canvas.height = 40;\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // 背景色\r\n    ctx.fillStyle = '#f5f5f5';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    // 绘制验证码文本\r\n    ctx.font = '24px Arial';\r\n    ctx.fillStyle = '#333';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText(result, canvas.width/2, canvas.height/2);\r\n    \r\n    // 添加干扰线\r\n    for (let i = 0; i < 5; i++) {\r\n      ctx.strokeStyle = '#ccc';\r\n      ctx.beginPath();\r\n      ctx.moveTo(Math.random() * canvas.width, Math.random() * canvas.height);\r\n      ctx.lineTo(Math.random() * canvas.width, Math.random() * canvas.height);\r\n      ctx.stroke();\r\n    }\r\n    \r\n    this.captchaImage = canvas.toDataURL();\r\n  },\r\n  \r\n  refreshCaptcha() {\r\n    this.generateCaptcha();\r\n  },\r\n  \r\n  mounted() {\r\n    this.generateCaptcha(); // 组件加载时生成验证码\r\n  },\r\n  \r\n  async handleLogin() {\r\n    // 验证码验证（不区分大小写）\r\n    if (this.loginForm.captcha.toUpperCase() !== this.captchaText.toUpperCase()) {\r\n      alert('验证码错误');\r\n      this.refreshCaptcha();\r\n      return;\r\n    }\r\n      try {\r\n      const response = await axios.post('http://localhost:8080/api/user/login', {\r\n        username: this.loginForm.username,\r\n        password: this.loginForm.password\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        // 登录成功处理\r\n        localStorage.setItem('token', response.data.token);\r\n        this.$router.push('/'); // 跳转到首页\r\n      } else {\r\n        alert(response.data.message || '登录失败');\r\n        this.refreshCaptcha();\r\n      }\r\n    } catch (error) {\r\n      console.error('登录请求失败:', error);\r\n      alert('网络错误，请稍后重试');\r\n      this.refreshCaptcha();\r\n    }\r\n    },\r\n    switchToRegister() {\r\n      this.$emit('switch-to-register')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 新增验证码样式 */\r\n.captcha-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.captcha-image {\r\n  margin-left: 10px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n  border: 1px solid #ddd;\r\n  padding: 5px;\r\n}\r\n.captcha-container::after {\r\n  content: \"Click to refresh\";\r\n  margin-left: 10px;\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.login-container {\r\n  margin: 0 auto;\r\n  max-width: 400px;\r\n  padding: 30px;\r\n}\r\n\r\n.login-container::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.3); /* 可选的遮罩层，增强文字可读性 */\r\n  z-index: 0;\r\n}\r\n\r\n\r\n.auth-form {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  border-radius: 10px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n  transform: translateY(0);\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.auth-form:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n/* 新增动画效果 */\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\nbutton {\r\n  /* 修改按钮样式 */\r\n  background-color: #4caf50;\r\n  color: white;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 25px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: all 0.3s ease;\r\n  width: 100%;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n  transform: scale(1.02);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  font-size: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\ninput {\r\n  width: 95%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  background-color: #f5f9ff;\r\n}\r\n\r\na {\r\n  color: #007bff;\r\n  text-decoration: none;\r\n}\r\n\r\na:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>"],"mappings":";AA4BA,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,OAAO,EAAE;MACX,CAAC;MACDC,YAAY,EAAE,EAAE;MAAG;MACnBC,WAAW,EAAE,EAAC,CAAK;IACrB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC,EAAG;EAC1B,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAAA,EAAG;MAClB;MACA,MAAMC,KAAI,GAAI,yDAAyD;MACvE,IAAIC,MAAK,GAAI,EAAE;MACf,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BD,MAAK,IAAKD,KAAK,CAACG,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAIN,KAAK,CAACO,MAAM,CAAC,CAAC;MAClE;MACA,IAAI,CAACZ,WAAU,GAAIM,MAAM;;MAEzB;MACA,MAAMO,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,KAAI,GAAI,GAAG;MAClBH,MAAM,CAACI,MAAK,GAAI,EAAE;MAClB,MAAMC,GAAE,GAAIL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAD,GAAG,CAACE,SAAQ,GAAI,SAAS;MACzBF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAER,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;;MAE/C;MACAC,GAAG,CAACI,IAAG,GAAI,YAAY;MACvBJ,GAAG,CAACE,SAAQ,GAAI,MAAM;MACtBF,GAAG,CAACK,SAAQ,GAAI,QAAQ;MACxBL,GAAG,CAACM,YAAW,GAAI,QAAQ;MAC3BN,GAAG,CAACO,QAAQ,CAACnB,MAAM,EAAEO,MAAM,CAACG,KAAK,GAAC,CAAC,EAAEH,MAAM,CAACI,MAAM,GAAC,CAAC,CAAC;;MAErD;MACA,KAAK,IAAIV,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BW,GAAG,CAACQ,WAAU,GAAI,MAAM;QACxBR,GAAG,CAACS,SAAS,CAAC,CAAC;QACfT,GAAG,CAACU,MAAM,CAACnB,IAAI,CAACE,MAAM,CAAC,IAAIE,MAAM,CAACG,KAAK,EAAEP,IAAI,CAACE,MAAM,CAAC,IAAIE,MAAM,CAACI,MAAM,CAAC;QACvEC,GAAG,CAACW,MAAM,CAACpB,IAAI,CAACE,MAAM,CAAC,IAAIE,MAAM,CAACG,KAAK,EAAEP,IAAI,CAACE,MAAM,CAAC,IAAIE,MAAM,CAACI,MAAM,CAAC;QACvEC,GAAG,CAACY,MAAM,CAAC,CAAC;MACd;MAEA,IAAI,CAAC/B,YAAW,GAAIc,MAAM,CAACkB,SAAS,CAAC,CAAC;IACxC,CAAC;IAED7B,cAAcA,CAAA,EAAG;MACf,IAAI,CAACE,eAAe,CAAC,CAAC;IACxB,CAAC;IAEDH,OAAOA,CAAA,EAAG;MACR,IAAI,CAACG,eAAe,CAAC,CAAC,EAAE;IAC1B,CAAC;IAED,MAAM4B,WAAWA,CAAA,EAAG;MAClB;MACA,IAAI,IAAI,CAACrC,SAAS,CAACG,OAAO,CAACmC,WAAW,CAAC,MAAM,IAAI,CAACjC,WAAW,CAACiC,WAAW,CAAC,CAAC,EAAE;QAC3EC,KAAK,CAAC,OAAO,CAAC;QACd,IAAI,CAAChC,cAAc,CAAC,CAAC;QACrB;MACF;MACE,IAAI;QACJ,MAAMiC,QAAO,GAAI,MAAM1C,KAAK,CAAC2C,IAAI,CAAC,sCAAsC,EAAE;UACxExC,QAAQ,EAAE,IAAI,CAACD,SAAS,CAACC,QAAQ;UACjCC,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACE;QAC3B,CAAC,CAAC;QAEF,IAAIsC,QAAQ,CAACzC,IAAI,CAAC2C,OAAO,EAAE;UACzB;UACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACzC,IAAI,CAAC8C,KAAK,CAAC;UAClD,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC1B,OAAO;UACLR,KAAK,CAACC,QAAQ,CAACzC,IAAI,CAACiD,OAAM,IAAK,MAAM,CAAC;UACtC,IAAI,CAACzC,cAAc,CAAC,CAAC;QACvB;MACF,EAAE,OAAO0C,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/BV,KAAK,CAAC,YAAY,CAAC;QACnB,IAAI,CAAChC,cAAc,CAAC,CAAC;MACvB;IACA,CAAC;IACD4C,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACC,KAAK,CAAC,oBAAoB;IACjC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}