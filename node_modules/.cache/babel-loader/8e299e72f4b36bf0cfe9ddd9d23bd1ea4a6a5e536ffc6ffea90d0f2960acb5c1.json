{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: '',\n        captcha: ''\n      },\n      captchaImage: '' // 验证码图片base64数据\n    };\n  },\n  mounted() {\n    this.refreshCaptcha(); // 添加mounted钩子，确保组件加载时获取验证码\n  },\n  methods: {\n    // 从后端获取验证码\n    async refreshCaptcha() {\n      try {\n        const response = await axios.get('http://localhost:9090/api/v1/captcha', {\n          withCredentials: true\n        });\n        this.captchaImage = response.data.captchaImage;\n        console.log('验证码获取成功');\n      } catch (error) {\n        console.error('获取验证码失败:', error);\n        alert('获取验证码失败，请刷新页面重试');\n      }\n    },\n    async handleLogin() {\n      try {\n        if (!this.loginForm.captcha) {\n          alert('请输入验证码');\n          return;\n        }\n        const formData = new URLSearchParams();\n        formData.append('username', this.loginForm.username);\n        formData.append('password', this.loginForm.password);\n        formData.append('code', this.loginForm.captcha); // 移除toLowerCase()\n\n        console.log('正在提交登录请求...');\n        const response = await axios.post('http://localhost:9090/api/v1/accounts/login', formData, {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          withCredentials: true\n        });\n        if (response.data.success) {\n          localStorage.setItem('user', JSON.stringify(response.data.data));\n          this.$router.push('/accountauth');\n        } else {\n          alert(response.data.message || '登录失败');\n          this.refreshCaptcha();\n        }\n      } catch (error) {\n        console.error('登录请求失败:', error.response?.data || error);\n        if (error.response?.data?.message) {\n          alert(error.response.data.message);\n        } else {\n          alert('登录失败，请检查用户名和密码');\n        }\n        this.refreshCaptcha();\n      }\n    },\n    switchToRegister() {\n      this.$emit('switch-to-register');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","loginForm","username","password","captcha","captchaImage","mounted","refreshCaptcha","methods","response","get","withCredentials","console","log","error","alert","handleLogin","formData","URLSearchParams","append","post","headers","success","localStorage","setItem","JSON","stringify","$router","push","message","switchToRegister","$emit"],"sources":["D:\\ournewpetstore\\src\\components\\account\\UserLogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n   <div class=\"auth-form\">\r\n     <h2>Login in to Your Account</h2>\r\n     <form @submit.prevent=\"handleLogin\">\r\n       <div class=\"form-group\">\r\n         <label>Username</label>\r\n         <input v-model=\"loginForm.username\" type=\"text\" required>\r\n       </div>\r\n       <div class=\"form-group\">\r\n         <label>Password</label>\r\n         <input v-model=\"loginForm.password\" type=\"password\" required>\r\n       </div>\r\n       <div class=\"form-group\">\r\n         <label>Captcha</label>\r\n         <div class=\"captcha-container\">\r\n           <input v-model=\"loginForm.captcha\" type=\"text\" required>\r\n           <img :src=\"captchaImage\" @click=\"refreshCaptcha\" alt=\"验证码\" class=\"captcha-image\">\r\n         </div>\r\n       </div>\r\n       <button type=\"submit\">登录</button>\r\n     </form>\r\n     <p>Need an account ？<a href=\"#\" @click=\"switchToRegister\">Register now !</a></p>\r\n   </div>\r\n </div>\r\n </template>\r\n \r\n <script>\r\n import axios from 'axios'; \r\n export default {\r\n   data() {\r\n     return {\r\n       loginForm: {\r\n         username: '',\r\n         password: '',\r\n         captcha: ''\r\n       },\r\n       captchaImage: '' // 验证码图片base64数据\r\n       \r\n     }\r\n   },\r\n   mounted() {\r\n     this.refreshCaptcha();  // 添加mounted钩子，确保组件加载时获取验证码\r\n   },\r\n   methods: {\r\n     // 从后端获取验证码\r\n     async refreshCaptcha() {\r\n       try {\r\n         const response = await axios.get('http://localhost:9090/api/v1/captcha', {\r\n           withCredentials: true\r\n         });\r\n         this.captchaImage = response.data.captchaImage;\r\n         console.log('验证码获取成功');\r\n       } catch (error) {\r\n         console.error('获取验证码失败:', error);\r\n         alert('获取验证码失败，请刷新页面重试');\r\n       }\r\n     },\r\n     async handleLogin() {\r\n       try {\r\n         if (!this.loginForm.captcha) {\r\n           alert('请输入验证码');\r\n           return;\r\n         }\r\n \r\n         const formData = new URLSearchParams();\r\n         formData.append('username', this.loginForm.username);\r\n         formData.append('password', this.loginForm.password);\r\n         formData.append('code', this.loginForm.captcha);  // 移除toLowerCase()\r\n         \r\n         console.log('正在提交登录请求...');\r\n         const response = await axios.post('http://localhost:9090/api/v1/accounts/login', formData, {\r\n           headers: {\r\n             'Content-Type': 'application/x-www-form-urlencoded'\r\n           },\r\n           withCredentials: true\r\n         });\r\n         \r\n         if (response.data.success) {\r\n           localStorage.setItem('user', JSON.stringify(response.data.data));\r\n           this.$router.push('/accountauth');\r\n         } else {\r\n           alert(response.data.message || '登录失败');\r\n           this.refreshCaptcha();\r\n         }\r\n       } catch (error) {\r\n         console.error('登录请求失败:', error.response?.data || error);\r\n         if (error.response?.data?.message) {\r\n           alert(error.response.data.message);\r\n         } else {\r\n           alert('登录失败，请检查用户名和密码');\r\n         }\r\n         this.refreshCaptcha();\r\n       }\r\n     },\r\n     \r\n     switchToRegister() {\r\n       this.$emit('switch-to-register')\r\n     }\r\n   }\r\n }\r\n </script>\r\n \r\n <style scoped>\r\n /* 新增验证码样式 */\r\n .captcha-container {\r\n   display: flex;\r\n   align-items: center;\r\n }\r\n .captcha-image {\r\n   margin-left: 10px;\r\n   height: 40px;\r\n   cursor: pointer;\r\n   border: 1px solid #ddd;\r\n   padding: 5px;\r\n }\r\n .captcha-container::after {\r\n   content: \"Click to refresh\";\r\n   margin-left: 10px;\r\n   font-size: 12px;\r\n   color: #666;\r\n }\r\n \r\n .login-container {\r\n   margin: 0 auto;\r\n   max-width: 400px;\r\n   padding: 30px;\r\n }\r\n \r\n .login-container::before {\r\n   content: '';\r\n   position: absolute;\r\n   top: 0;\r\n   left: 0;\r\n   right: 0;\r\n   bottom: 0;\r\n   background-color: rgba(0, 0, 0, 0.3); /* 可选的遮罩层，增强文字可读性 */\r\n   z-index: 0;\r\n }\r\n \r\n \r\n .auth-form {\r\n   max-width: 400px;\r\n   margin: 0 auto;\r\n   padding: 30px;\r\n   border-radius: 10px;\r\n   background-color: rgba(255, 255, 255, 0.9);\r\n   box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n   transform: translateY(0);\r\n   transition: all 0.3s ease;\r\n   position: relative;\r\n   z-index: 1;\r\n }\r\n \r\n .auth-form:hover {\r\n   transform: translateY(-5px);\r\n   box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\r\n }\r\n \r\n /* 新增动画效果 */\r\n @keyframes fadeIn {\r\n   from {\r\n     opacity: 0;\r\n     transform: translateY(20px);\r\n   }\r\n   to {\r\n     opacity: 1;\r\n     transform: translateY(0);\r\n   }\r\n }\r\n \r\n button {\r\n   /* 修改按钮样式 */\r\n   background-color: #4caf50;\r\n   color: white;\r\n   padding: 12px 24px;\r\n   border: none;\r\n   border-radius: 25px;\r\n   cursor: pointer;\r\n   font-size: 16px;\r\n   transition: all 0.3s ease;\r\n   width: 100%;\r\n }\r\n \r\n button:hover {\r\n   background-color: #45a049;\r\n   transform: scale(1.02);\r\n }\r\n \r\n h2 {\r\n   text-align: center;\r\n   margin-bottom: 20px;\r\n   font-size: 20px;\r\n }\r\n \r\n .form-group {\r\n   margin-bottom: 20px;\r\n }\r\n \r\n input {\r\n   width: 95%;\r\n   padding: 10px;\r\n   border: 1px solid #ccc;\r\n   border-radius: 3px;\r\n   background-color: #f5f9ff;\r\n }\r\n \r\n a {\r\n   color: #007bff;\r\n   text-decoration: none;\r\n }\r\n \r\n a:hover {\r\n   text-decoration: underline;\r\n }\r\n </style>"],"mappings":";AA4BC,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,OAAO,EAAE;MACX,CAAC;MACDC,YAAY,EAAE,EAAC,CAAE;IAEnB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC,EAAG;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMD,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,sCAAsC,EAAE;UACvEC,eAAe,EAAE;QACnB,CAAC,CAAC;QACF,IAAI,CAACN,YAAW,GAAII,QAAQ,CAACT,IAAI,CAACK,YAAY;QAC9CO,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACxB,EAAE,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;QAChCC,KAAK,CAAC,iBAAiB,CAAC;MAC1B;IACF,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,IAAI,CAAC,IAAI,CAACf,SAAS,CAACG,OAAO,EAAE;UAC3BW,KAAK,CAAC,QAAQ,CAAC;UACf;QACF;QAEA,MAAME,QAAO,GAAI,IAAIC,eAAe,CAAC,CAAC;QACtCD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAClB,SAAS,CAACC,QAAQ,CAAC;QACpDe,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAClB,SAAS,CAACE,QAAQ,CAAC;QACpDc,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAClB,SAAS,CAACG,OAAO,CAAC,EAAG;;QAElDQ,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC1B,MAAMJ,QAAO,GAAI,MAAMV,KAAK,CAACqB,IAAI,CAAC,6CAA6C,EAAEH,QAAQ,EAAE;UACzFI,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDV,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAACT,IAAI,CAACsB,OAAO,EAAE;UACzBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACjB,QAAQ,CAACT,IAAI,CAACA,IAAI,CAAC,CAAC;UAChE,IAAI,CAAC2B,OAAO,CAACC,IAAI,CAAC,cAAc,CAAC;QACnC,OAAO;UACLb,KAAK,CAACN,QAAQ,CAACT,IAAI,CAAC6B,OAAM,IAAK,MAAM,CAAC;UACtC,IAAI,CAACtB,cAAc,CAAC,CAAC;QACvB;MACF,EAAE,OAAOO,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACL,QAAQ,EAAET,IAAG,IAAKc,KAAK,CAAC;QACvD,IAAIA,KAAK,CAACL,QAAQ,EAAET,IAAI,EAAE6B,OAAO,EAAE;UACjCd,KAAK,CAACD,KAAK,CAACL,QAAQ,CAACT,IAAI,CAAC6B,OAAO,CAAC;QACpC,OAAO;UACLd,KAAK,CAAC,gBAAgB,CAAC;QACzB;QACA,IAAI,CAACR,cAAc,CAAC,CAAC;MACvB;IACF,CAAC;IAEDuB,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACC,KAAK,CAAC,oBAAoB;IACjC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}