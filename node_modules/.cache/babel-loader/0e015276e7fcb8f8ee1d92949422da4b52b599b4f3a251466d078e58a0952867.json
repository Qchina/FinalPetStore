{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      registerForm: {\n        username: '',\n        password: '',\n        confirmPassword: '',\n        captcha: ''\n      },\n      captchaImage: '' // 验证码图片base64数据\n    };\n  },\n  mounted() {\n    this.refreshCaptcha(); // 添加mounted钩子，确保组件加载时获取验证码\n  },\n  computed: {\n    passwordMismatch() {\n      return this.registerForm.password && this.registerForm.confirmPassword && this.registerForm.password !== this.registerForm.confirmPassword;\n    }\n  },\n  methods: {\n    async refreshCaptcha() {\n      try {\n        const response = await axios.get('http://localhost:9090/api/v1/captcha', {\n          withCredentials: true\n        });\n        this.captchaImage = response.data.captchaImage;\n      } catch (error) {\n        console.error('获取验证码失败:', error);\n        alert('获取验证码失败，请刷新页面重试');\n      }\n    },\n    async handleRegister() {\n      if (this.passwordMismatch) {\n        alert('请确保两次输入的密码一致');\n        return;\n      }\n      try {\n        const registerData = {\n          ...this.registerForm\n        };\n        delete registerData.confirmPassword; // 删除确认密码字段\n\n        const response = await axios.post('http://localhost:9090/api/v1/accounts/register', registerData, {\n          withCredentials: true\n        });\n        if (response.data.success) {\n          alert('注册成功');\n          this.registerForm = {\n            username: '',\n            password: '',\n            confirmPassword: '',\n            captcha: ''\n          };\n          this.$emit('switch-to-login');\n        } else {\n          alert(response.data.message || '注册失败');\n          this.refreshCaptcha();\n        }\n      } catch (error) {\n        if (error.response) {\n          alert(error.response.data.message || '注册失败');\n        } else {\n          alert('网络错误，请稍后再试');\n        }\n        this.refreshCaptcha();\n      }\n    },\n    switchToLogin() {\n      this.$emit('switch-to-login');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","registerForm","username","password","confirmPassword","captcha","captchaImage","mounted","refreshCaptcha","computed","passwordMismatch","methods","response","get","withCredentials","error","console","alert","handleRegister","registerData","post","success","$emit","message","switchToLogin"],"sources":["D:\\ournewpetstore\\src\\components\\account\\UserRegister.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-container\">\r\n    <div class=\"auth-form\">\r\n      <h2>Register A New Account</h2>\r\n      <form @submit.prevent=\"handleRegister\">\r\n        <div class=\"form-group\">\r\n          <label>Username</label>\r\n          <input v-model=\"registerForm.username\" type=\"text\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Password</label>\r\n          <input v-model=\"registerForm.password\" type=\"password\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Password Again</label>\r\n          <input v-model=\"registerForm.confirmPassword\" type=\"password\" required>\r\n          <p v-if=\"passwordMismatch\" class=\"error-message\">密码不匹配</p>  \r\n        </div>\r\n        <div class=\"form-group\">\r\n        <label>Captcha</label>\r\n        <div class=\"captcha-container\">\r\n          <input v-model=\"registerForm.captcha\" type=\"text\" required>\r\n          <img :src=\"captchaImage\" @click=\"refreshCaptcha\" alt=\"验证码\" class=\"captcha-image\">\r\n        </div>\r\n      </div>\r\n        <div class=\"form-footer\">\r\n          <button type=\"submit\">注册</button>\r\n        </div>\r\n      </form>\r\n      <p>Already have an account？<a href=\"#\" @click=\"switchToLogin\">Go Login !</a></p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n  data() {\r\n    return {\r\n      registerForm: {\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        captcha: ''\r\n      },\r\n       captchaImage: '' // 验证码图片base64数据\r\n    }\r\n  },\r\n  mounted() {\r\n    this.refreshCaptcha();  // 添加mounted钩子，确保组件加载时获取验证码\r\n  },\r\n  computed: {\r\n    passwordMismatch() {\r\n      return this.registerForm.password && \r\n             this.registerForm.confirmPassword && \r\n             this.registerForm.password !== this.registerForm.confirmPassword\r\n    }\r\n  },\r\n  methods: {\r\n    async refreshCaptcha() {\r\n      try {\r\n        const response = await axios.get('http://localhost:9090/api/v1/captcha', {\r\n          withCredentials: true\r\n        });\r\n        this.captchaImage = response.data.captchaImage;\r\n      } catch (error) {\r\n        console.error('获取验证码失败:', error);\r\n        alert('获取验证码失败，请刷新页面重试');\r\n      }\r\n    },\r\n    async handleRegister() {\r\n      if (this.passwordMismatch) {\r\n        alert('请确保两次输入的密码一致');\r\n        return;\r\n      }\r\n      try {\r\n        const registerData = { ...this.registerForm };\r\n        delete registerData.confirmPassword; // 删除确认密码字段\r\n        \r\n        const response = await axios.post('http://localhost:9090/api/v1/accounts/register', registerData, {\r\n          withCredentials: true\r\n        });\r\n        \r\n        if (response.data.success) {\r\n          alert('注册成功');\r\n          this.registerForm = {\r\n            username: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            captcha: ''\r\n          };\r\n          this.$emit('switch-to-login');\r\n        } else {\r\n          alert(response.data.message || '注册失败');\r\n          this.refreshCaptcha();\r\n        }\r\n      } catch (error) {\r\n        if (error.response) {\r\n          alert(error.response.data.message || '注册失败');\r\n        } else {\r\n          alert('网络错误，请稍后再试');\r\n        }\r\n        this.refreshCaptcha();\r\n      }\r\n    },\r\n    switchToLogin() {\r\n      this.$emit('switch-to-login')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 添加验证码相关样式 */\r\n.captcha-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.captcha-image {\r\n  margin-left: 10px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n  border: 1px solid #ddd;\r\n  padding: 5px;\r\n}\r\n\r\n.captcha-container::after {\r\n  content: \"Click to refresh\";\r\n  margin-left: 10px;\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.register-container {\r\n  margin: 0 auto;\r\n  max-width: 400px;\r\n  padding: 30px;\r\n}\r\n\r\n.register-container::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  z-index: 0;\r\n}\r\n\r\n.auth-form {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  border-radius: 10px;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n  transform: translateY(0);\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.auth-form:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  font-size: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\ninput {\r\n  width: 95%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  background-color: #f5f9ff;\r\n}\r\n\r\nbutton {\r\n  background-color: #2196F3;\r\n  color: white;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 25px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: all 0.3s ease;\r\n  width: 100%;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0b7dda;\r\n  transform: scale(1.02);\r\n}\r\n\r\na {\r\n  color: #007bff;\r\n  text-decoration: none;\r\n}\r\n\r\na:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  font-size: 12px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.form-footer {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.form-footer p {\r\n  margin: 0;\r\n}\r\n</style>"],"mappings":"AAmCA,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,eAAe,EAAE,EAAE;QACnBC,OAAO,EAAE;MACX,CAAC;MACAC,YAAY,EAAE,EAAC,CAAE;IACpB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC,EAAG;EAC1B,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACT,YAAY,CAACE,QAAO,IACzB,IAAI,CAACF,YAAY,CAACG,eAAc,IAChC,IAAI,CAACH,YAAY,CAACE,QAAO,KAAM,IAAI,CAACF,YAAY,CAACG,eAAc;IACxE;EACF,CAAC;EACDO,OAAO,EAAE;IACP,MAAMH,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAMI,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,sCAAsC,EAAE;UACvEC,eAAe,EAAE;QACnB,CAAC,CAAC;QACF,IAAI,CAACR,YAAW,GAAIM,QAAQ,CAACZ,IAAI,CAACM,YAAY;MAChD,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;QAChCE,KAAK,CAAC,iBAAiB,CAAC;MAC1B;IACF,CAAC;IACD,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,IAAI,CAACR,gBAAgB,EAAE;QACzBO,KAAK,CAAC,cAAc,CAAC;QACrB;MACF;MACA,IAAI;QACF,MAAME,YAAW,GAAI;UAAE,GAAG,IAAI,CAAClB;QAAa,CAAC;QAC7C,OAAOkB,YAAY,CAACf,eAAe,EAAE;;QAErC,MAAMQ,QAAO,GAAI,MAAMb,KAAK,CAACqB,IAAI,CAAC,gDAAgD,EAAED,YAAY,EAAE;UAChGL,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAACZ,IAAI,CAACqB,OAAO,EAAE;UACzBJ,KAAK,CAAC,MAAM,CAAC;UACb,IAAI,CAAChB,YAAW,GAAI;YAClBC,QAAQ,EAAE,EAAE;YACZC,QAAQ,EAAE,EAAE;YACZC,eAAe,EAAE,EAAE;YACnBC,OAAO,EAAE;UACX,CAAC;UACD,IAAI,CAACiB,KAAK,CAAC,iBAAiB,CAAC;QAC/B,OAAO;UACLL,KAAK,CAACL,QAAQ,CAACZ,IAAI,CAACuB,OAAM,IAAK,MAAM,CAAC;UACtC,IAAI,CAACf,cAAc,CAAC,CAAC;QACvB;MACF,EAAE,OAAOO,KAAK,EAAE;QACd,IAAIA,KAAK,CAACH,QAAQ,EAAE;UAClBK,KAAK,CAACF,KAAK,CAACH,QAAQ,CAACZ,IAAI,CAACuB,OAAM,IAAK,MAAM,CAAC;QAC9C,OAAO;UACLN,KAAK,CAAC,YAAY,CAAC;QACrB;QACA,IAAI,CAACT,cAAc,CAAC,CAAC;MACvB;IACF,CAAC;IACDgB,aAAaA,CAAA,EAAG;MACd,IAAI,CAACF,KAAK,CAAC,iBAAiB;IAC9B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}